Django 2.0.1
Create Application
View Application
Upload Document
Download Document
Create Applicant
Deactivate Applicant"
DONLOAD_QUESTIONNAIRE
Download Questionnaire
View Case
audit.models import AUDIT_TYPE_EVENT
BaseOutcome
Cases
Modify the Close Case
NO_APPEAL
TIMER
action.get("outcome_spec
Blank
ArchiveReason
PublishInitiation(CaseAction
time_gate_value.get("reset
time_gate_value["unit
target.get("outcome_spec
CASE_NUMBER
milestone_types = self.evaluate_rules
isinstance(milestone_types
register_outcomes
register_outcome(HearingRequestClosesTimeGate
workflow_template_trans_safeguards.json
OuterRef
CASE_TYPE_ANTI_SUBSIDY
SUBMISSION_TYPE_NOTICE_OF_INITIATION
DECISION_TO_INITIATE_KEY
CaseRole
InvalidAccess
Organisation, get_organisation
BaseModel
SystemParameter
CaseType
CaseStage
CaseWorkflow
contact.set_user_context(user
user_context=[user
Case Created"
Owner
param organisation: Organisation
TRA
created_by
org_role
OuterRef("pk
case_id
CaseManager
cws.value
CaseWorkflowState.objects.get_or_create
PUBLIC_ROOT_URL}/public/case/{self.reference}/
Reset
organisation {Organisation} -- Organisation
param
OrganisationCaseRole.objects.has_organisation_case_role
InvalidAccess(f"User
evidence_of_subsidy
dict["archive_reason
@method_cache
self.registration_deadline
Q(status__draft=True
assign_user
UserCase
exc
exc_info
submission_request_name
next_action_obj
stage_id
requested_by
TOML
py37
django.contrib import
UserAdmin
UserProfile
UserCreationForm(forms
CharField(label="Password
code="password_mismatch
UserChangeForm(forms
UserProfileInline(admin
StackedInline
User
is_superuser
deleted_at
TwoFactorAuthAdmin(admin
generated_at
JobTitleAdmin
AUDIT_TYPE_PURGE
AUDIT_TYPE_RESTORE
Audit(models
Purge
Log In"
Log Out
Event
ForeignKey(ContentType
self.data["case_title
case_title
self.data
@staticmethod
Audit Type
Audit Content
row_data.get("content_type
self.data.items
hasattr(value
LogHumaniser
f"Error
self.data.get("id
isinstance(spec
AlterField
PURGE
LOGOUT
EVENT
NOTIFY
3246cf3a-179e-48df-a92d-4725ab12179d
2071db92-4ebd-4e27-
REGISTRATION_SOFT_LOCK_KEY
FEATURE_ORGANISATION_ADMIN
TRADE_REMEDIES_EMAIL_DOMAIN
4e7e9a27-d96f-401c-b8e3
NOTIFY_EMAIL_EXISTS
WSGI
ResponseSuccess
CompaniesHouseApiSearch(TradeRemediesApiView
.json
Selection
Label
HS
TruncDate
User.objects.filter
APIView
Response
BasePermission
BaseParser
ParseError
Group
FeatureFlags
AccessDenied
GroupPermission(BasePermission
group).user_set.filter(id
HTTPRequest
all Trade Remedies API Views
API Exception
SystemParameters
GroupPermission
the API View Object
int(request.query_params.get("start
raise AccessDenied("User
ResponseError
Parser
MultiPartJSONParser
Media Type
DjangoMultiPartParser(meta
DataAndFiles(_data
HTTPError
param str reference
isinstance(audit_data
audit_log_task.delay(audit_kwargs
boto3==1.17.88
celery==4.4.0
colour==0.1.5
django-countries==5.5
django-dirtyfields
django-redis==4.10.0
freezegun==1.1.0
pytz
werkzeug==0.15.3
CreateModel
modified_by
bases=
AuditableMixin
OrganisationUser
OrganisationCaseRoleInline(admin
OrganisationUserInline(admin
# Load
audit.models import
Audit
audit log download
Command
audit log
CharField(max_length=50
AutoField
JSONField
# Set
# Set cookie
JS
CRSF
# Set anti XSS
AUDIT_LOG_USER_FIELD
the X-Frame-Options
DENY
DLL
env/
var/
PyInstaller
# Installer
pip-delete-this-directory.txt
local_settings.py
Scrapy
Sphinx
PyBuilder
Jupyter Notebook
ENV/
# Rope
# Mac
getLogger
SmallIntegerField(default=0
non_conf
CeleryIntegration
django_log_formatter_ecs
Vault
NB
ImproperlyConfigured
default=
Build
# Quick
# See
# Application
DIRS
OPTIONS
_database_uri =
f"{_VCAP_SERVICES['postgres'][0]['credentials']['uri
_database_uri
MAX_CONNS
https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
NAME
min_length
Europe
Y-%m-%dT%H:%M:%S%z
# Redis - Trade
the Django Cache
Celery
Caseworker
message)s
env("AWS_REGION
default="eu
S3 Root
Max
# Set to True
CASE_WORKER_ENVIRONMENT_KEY = env("CASE_WORKER_ENVIRONMENT_KEY
PUBLIC_ENVIRONMENT_KEY =
FILE
HTTP_X_FORWARDED_FOR
REMOTE_ADDR
Time
# Organisation
ORGANISATION_INVITE_DURATION_HOURS
Asynchronous
Elastic
VCAP
elastic_vcap_config
Companies House
COMPANIES_HOUSE_API_KEY = env("COMPANIES_HOUSE_API_KEY
Geckoboard API
EU
European Customs Union
StreamHandler
ECSFormatter
roi_by_date
UI
Tick
YES_NO_NA
Economic Advisor
ExportSource
Organisation
A7Hhfa!jfaw@f
ModelSerializer
organisation_name="Test Organisation
validated_data
TEST_EMAIL
core.services.base
WorkflowTemplate
parent_id
F821
get_role
role_id
RepresentingAPI(TradeRemediesApiView
local.env
Dev
ClamAV
GOV_NOTIFY_API_KEY`  | Yes | API
SRE
https://github.com/uktrade/trade-remedies-docker
Revert
Trade Remedies
BDD
src="https://avatars3.githubusercontent.com
Malka</b></sub></a><br
ðŸ“–</a
Pull
href="https://github.com
Robert Meredith</b></sub></a><br /><a
href="https://github.com/
href="https://github.com/nao360"><img src="https://avatars3.githubusercontent.com/u/6898065?v=4?s=100
Paul Cooney</b></sub></a><br
Brendan Quinn</b></sub></a><br /><a href="https://github.com
IntegrityError
AD_HOC_KEY
Application
Questionnaire
Pre-Sampling Questionnaire
The Statement of Essential Facts
the Statement of Essential Facts
the Provisional Determination"
Invite 3rd party
Additional User Request
SubmissionType
created_at
name =
Content
Content.objects.get(id
DRAFT_RECEIVED
8aadc503-c1a5-427f-808b-88e794e2f919
Case Initiated
TO_BE_INITIATED
3a592eb0-0ea2-423f-b75a-237ae6f52095
167b7f0d-ecf5
-be81-44f1-a0d6
STATEMENT_OF_INTENDED_FINAL_DETERMINATION_RESPONSE_WINDOW_OPEN
Responses to Statement of Essential Facts
a5cde51d-d781-4876-beb8
39ad74e8-631a-4196-bffd-5241e35bf5e8
25dd3547-e321-4b3f-8ad1
RECONSIDERATION_TEAM_ASSIGNED
CaseAction
OrganisationUserAdmin(admin
OrganisationCaseRoleAdmin(admin
admin.site.register(OrganisationUser
CaseRoleAdmin
DocumentBundle
SubmissionType.objects.get(id
PASSWORD
context.organisation.assign_user(context.user
context.organisation.assign_user(test_user
assert test_org.has_user_role(context.user
Org A"'
@when("I
SubmissionStatus
d.
UUID
@get_submission_type.register(str
email="standard@gov.uk",#PS
email="standard2@gov.uk",#PS-IGNORE
self.organisation.assign_user(self.user_2
self.assertEqual(response.status_code
SubmissionAPITest(APITestCase
APISetUpMixin
Submission.objects.create
self.model_key
model_name="usercase
get_case_fixtures(*extra
load_system_params
email="trainvestigator@test.com",#PS-IGNORE
\n
name="confirmed_by
Action
INFORM_FOREIGN_GOVERNMENT
NODE_2
Workflow Templates
dateutil.relativedelta import
relativedelta
C901
CharField(max_length=4
CaseTypeManager
self.acronym
E722
E203
import_order_style
TimeGateStatusManager(models
TRA Document
Customer Document
logger.info("By
datahub_id
NoteAPIView
NoteAPIView.as_view
CountryField
ContactManager(models
{User}
Keyword Arguments
organisation {Organisation}
E164
Contact(BaseModel
CharField(max_length=80
DoesNotExist
self.country.code
CaseContact(SimpleBaseModel
GOV_NOTIFY_API_KEY
TD0001'
get_template(template_id
return client.post_template_preview
is_whitelisted(email
in_whitelist
import hashlib
STATE_INCOMPLETE
index.setdefault(index_key
KeyError
dict_.items
Convert
British
Mark
md5.hexdigest
source.get(field
crsr.execute(sql
lt(val_a
value[1
pdf
csv
OrganisationNonResponsiveToggleAPI
OrganisationUsersAPI.as_view
assert
ImportError
PYTHONPATH
WorkflowTemplateAPI.as_view
Home
Home.as_view
URLconf
core.services import auth
API_PREFIX}/security/groups/<str
AssignUserToCaseView.as_view
CreatePendingUserAPI.as_view
MyAccountView.as_view
API_PREFIX}/document/
admin.site.urls
context.django
OSError
raise Exception(path
BaseWriter
QuerysetExporter
writer_class_unimplemented
UnimplementedWriter(BaseWriter
UnimplementedWriter
MyWriter
rows(row
"Set of audit records
assert len(rows
file_format="csv
TestWriters
assert isinstance(writer.file
assert os.stat(file_name
del writer
writer.sensor.write_row.called_with(rows[0]
assert writer.sensor.write_rows.called_with(rows
x.strip
row.split
TestExporters
@pytest.mark.django_db
assert entries[0
CaseInitiationAPIView
ProductsAPIView
ProductHSCodeAPI
CaseStatusAPI
ReviewTypeAPIView
API_CACHE_TIMEOUT)(CaseEnumsAPI.as_view
CaseStateAPI.as_view
CaseParticipantsAPI.as_view
organisation_id>/all/
CaseStatusAPI.as_view
CaseUsersAPI.as_view
SubmissionsAPIView.as_view
SubmissionNotifyAPI.as_view
# Export Source
# Set Review
CaseWorkflowAPI.as_view
UserContext(**context
django.core.cache
feature_flag_ttl
FEATURE
ContentManager
self.case.refresh_from_db
fake_audit_model
Presentation
hasattr(shape
Transitional Anti-dumping Review
Finalise
one 10
Register
INV_POST_VERIFY_UPDATE_ANALYSIS
the Statement of Essential
FINAL_DET_ANALYSIS
FINAL_DET_ANALYSIS_INJURY_CALCS
FINAL_DET_ANALYSIS_NOTES
FINAL_DET_ANALYSIS_EI_TESTS
DIT
FINAL_DET_PREP_SOS
Correspondence  for SoS prepared
FINAL_DET_PREP_QA
FINAL_DET_APPROVE_TRA
FINAL_DET_PUBLISH_LABEL
FINAL_DET_PUBLISH_GOV
WTO
FINAL_DET_PUBLISH_FILE
MEASURE_COMMENCEMENT
RECON_CHECK_FOR_REQUESTS_RECEIVED
RECON_INIT_DECISION_LABEL
RECON_INIT_DECISION_TRA
RECON_PUBLISH_INIT_UPLOADED
RECON_PUB_FIN_DET
Group, Permission
Super User
TRA Administrator
Organisation Owner
Organisation User
Third Party User
GROUP_PERMISSIONS["Third Party
the Super User
# Setup/Boot
GROUPS
Permission
Submission Feedback
max_label
min_label
A Label
NotFoundApiExceptions
get_case
a Task
request.data.get("id
request.data.get("model_id
content_type=_content_type
user_context=[request.user]
Updating System
key__in=["NOTICE_OF_INITIATION_DOCUMENT
COLOUR_GREEN=\033[32;01
COLOUR_YELLOW=\033[33;01
dev-requirements$(COLOUR_NONE
"Queryset Exporter
QuerysetExport
StopIteration
self.writer.write_row([f"NO EXPORT DATA
UserContext
UserContextTest(TestCase
assert isinstance(as_user_context
assert as_none
assert as_user_context.user.id =
Close
DECISIONS_REASONS
DECISIONS_JUSTIFY
DECISIONS_SOS
DECISIONS_REASONS_HEAR
Responses to Statement of Intended Final Determination
DECISIONS_REASONS_HEAR_ANALYSED
FINAL_DET_PREP_DIT_TARIFF
help="User
CommandError(f"User
# assign 'Organisation User'
f"Security
Document
doc = Document.objects.get(id
max_retries=3
logger.info(result
document_ids.values_list("id
Operation
to_state
name="created_at
trade_remedies_api &&
name="node_type
audit log case
audit_dict["assisted_by_id
audit_dict["model_id
report[key][sub_key].append(audit.parent_id
PermissionsMixin
Token
DEFAULT_USER_PERMISSIONS
UserExists
SAFE_COLOURS
UserManager(BaseUserManager
raise UserExists("Email
# Will
# Determine Organisation
# Contact
user.refresh_from_db
create_pending_user
# Will raise
Validation Error
set_verified
self.userprofile.timezone
duplicate_of
user->org
OrganisationUser.objects.assign_user
user_org =
user_org
self.login_code
case_specs =
json.loads(case_specs
case_spec
Healthcheck
AttributeError
case.remove_user
Sync
Assert
TWO_FACTOR_AUTH_VALID_DAYS
member_of
OneToOneField(User
CharField(max_length=8
job_title
self.job_title
self.locked_until
self.validity_period_for(self.delivery_type
Generate
PasswordResetManager(models
user__id
Raises ValidationError
PasswordResetRequest(models
un
self.user.is_tra
SystemParameter.get("NOTIFY_RESET_PASSWORD
Default Case'
Boolean
elif self.data_type
SP
key.upper
name="job_role
SubmissionDocument
audit =
self.assertEqual(audit.assisted_by_id
Document.objects.create(name="Test Document
assert audit.model_id
submission_id
self.assertEqual(audit.created_at
self.assertEqual(row[1
str(audit.case
audit_id
assert audit
TRA_ORGANISATION_ID
pluck
InvalidFile
audit import
PublicNoticeView(APIView
/case/{CASE_ID}/
registration_of_interest
None and case_id
Case.objects.get_case(id=case_id
sector_id
case.derive_case_name
request.data.getlist("user_id
SubmissionsAPIView(TradeRemediesApiView
result_list
doc_reviewed_at
Tidy
submission.case.stage.key
submission.deficiency_documents
contact_id
was_in_review
document_id__in
Product
request.data.get("hs_codes
ReviewTypeAPIView(TradeRemediesApiView
reference_case_id
CaseStage.objects.filter(key="DRAFT_RECEIVED").first
workflow_meta.get("draft_review_key
CaseWorkflowState.objects.set_next_action(case
request.data.getlist("nodes
node_spec.get("outcome_spec
ms_type
CaseRole.objects.all().order_by("id
case_worker_allowed_submission_types
public_submission_types
ThirdPartyInvitesAPI(TradeRemediesApiView
NoticesAPI(TradeRemediesApiView
notice.reference = reference
CaseType.objects.get(id
AA2E00
to_date
UserInvitations
ValidateInvitationAPIView.as_view
InviteThirdPartyAPI.as_view
REJECTED_ORG_CASE_ROLE
CaseContact
OrganisationsAPIView(TradeRemediesApiView
#         
NotFoundApiExceptions('Invalid
merge_org =
Organisation.objects.get(id
OrganisationApprovalNotifyAPI(TradeRemediesApiView
values.get("previous_role
case.assign_user(submission.created_by
OrganisationCaseRoleAPI(TradeRemediesApiView
LOA
usercase.case.to_minimal_dict
MY_OUTCOME
key_values=
key_values
key_values={"KEY_1
self.setup_outcome(self.get_if_eq_na_spec
NA
self.setup_outcome(self.get_chained_if_spec
self.setup_outcome(self.get_composed_or_if_eq_spec
requirements.in/../requirements/base.txt
black==19.10b0
django-appconf==1.0.4
django-dirtyfields==1.7.0
docopt==0.6.2
et-xmlfile==1.1.0
jdcal==1.4.1
packaging==21.0
pyjwt==2.1.0
pyparsing==2.4.7
pytest-xdist==2.3.0
ast==1.4.3
vine==1.3.0
#   amqp
wheel==0.37.0
django-db-geventpool==3.1.0
gunicorn==20.0.4
RUN_ASYNC =
logger.debug("Spec
self.eval_operator(operator_name
in_list
# Setup/Bootsrapping
CaseRolesAPI.as_view
register_report(report_func
REPORT_REGISTRY
NullBooleanField
F401
https://api.notifications.service.gov.uk/v2/notifications/
assert type(reset
PasswordResetRequest
assert bool(reset.code
PasswordResetRequest.objects.password_reset(code
assert type(reset_user
assert self.user
Chemical
Wood
cases.publish_non_conf_interested_parties
cases.case_admin
cases.workflow_editor
CASE_WORKER_ENVIRONMENT_KEY
PUBLIC_ENVIRONMENT_KEY
AuditTrailExport(TradeRemediesApiView
NotifyAuditReport(TradeRemediesApiView
Acknowledge
OrganisationName
OrganisationUser.objects.all().delete
id__in=["815893cb-fc21-498d-a88a-1f9bb911b030
ContactAdmin
PS-IGNORE
Content 1"
Content 2
Content 1
assert len(tree
Child 2
get_dataset
client.datasets.find_or_create
DATASETS[key]["mode
dataset.put(data
name="date
name="estimated_duration
LoadExtension
#        LoadExtension('pg_trgm'
name="modified_by
SC
CR
UserList
response.data[0]['email
JobTitle
self.print_warning(f"'{from_initialism} Document'
# workflow_template_anti_dumping.json
workflow_template_anti_subsidy.json
Safeguarding
Transitional Anti-subsidy Review
json_txt = json.dumps(workflow.template
json_txt
updated_json_txt = json_txt.replace
LEGACY_ORGANISATION_NAME
INIT_AS_INFORM
Verification
Correspondence for SoS prepared
PROV_PREPARE_REVIEW
PROV_FACTS_FACTS_PUBLISHED
MIT License
Department for International Trade
Software
IMPLIED
DAMAGES
LIABILITY
verbose_name="password
is_staff
name="UserProfile
assert isinstance(result
x["pk
OperationalError
parent.data
ON
SELECT a.id
a.data
ON a.id=
b.id
Audit.objects.raw(SQL
submission_documents_type(apps
key="caseworker
subdoc.document.created_by.is_tra
notify_contact_email
accepted_by
meta
{User
InvitationManager
approved_by
"Assign Organisation User
USER
Submission
approved_by=self.created_by
approved_at
# Assign
the Third Party's
SmallIntegerField
self.default
AWS_ACCESS_KEY_ID
s3
S3 Bucket
@method_decorator(csrf_exempt
"Authentication View
Valid
Responds
user.deleted_at
Forgotten
user.is_active
"Perform Authentication
RegistrationAPIView(APIView
key.replace
# Third Party's
request.user.refresh_from_db
two_factor.fail(
bool(user
get_elastic
S3FileField
Document.objects.filter
documents.filter(query_args
Document(BaseModel
CharField(max_length=255
self.file.name.split("
self.created_by.is_tra
subdoc =
self.block_reason
documents.av_scan
Object(self.file.name
doc["case_id
DocumentBundle(SimpleBaseModel
self.submission_type
DocumentBundle.objects.exclude(id
name="block_reason
get_param
self.__class__.__name
Ariel Malka'
Harel Malka'
to_value
elif isinstance(value
models.fields.files
instance._user_context.user
param kwargs
model_name='submissionstatus
name='id
A1
email="adminuser@tra.gov",#PS-IGNORE
A2
self.caseX.assign_user(self.userA1
self.organisationA
assert self.caseX.has_organisation(self.organisationA
assert self.caseX.has_organisation(self.organisationB
assert self.caseY.has_organisation(self.organisationB
assert self.userA1.can_do("UPLOAD_DOCUMENT
User A2
email="user4@organisationB.com",#PS-IGNORE
self.organisationB.assign_user(self.userL1
self.caseY.assign_organisation_user(self.userL1
assert set(self.userL2.userprofile.all_organisations
assert list(self.userA1.get_cases(self.organisationA
assert list(self.userA1.get_cases(self.organisationB
assert list(self.userA2.get_cases(self.organisationA
assert list(self.userA2.get_cases(self.organisationB
assert list(self.userB1.get_cases(self.organisationA
assert list(self.userB1.get_cases(self.organisationB
assert list(self.userB1.get_cases(self.organisationC
assert list(self.userB2.get_cases(self.organisationA
assert list(self.userB2.get_cases(self.organisationB
assert list(self.userB2.get_cases(self.organisationC
assert list(self.userL1.get_cases(self.organisationA
assert list(self.userL1.get_cases(self.organisationB
assert list(self.userL2.get_cases(self.organisationA
assert list(self.userL2.get_cases(self.organisationB
assert list(self.userL2.get_cases(self.organisationC
assert self.userL1.can_do("UPLOAD_DOCUMENT"
assert self.userL2.can_do("UPLOAD_DOCUMENT"
SubmissionType(models
Ex Officion
IntegerField
self.notify_template
subtype.deficient_status
no_id
no.id
CSV Writer
self.csv
"Write a single row to the csv file
datetime(2019
row.cells
Org A"
Org A"  #
Case X"
max_length=254
max_length=80
AUDIT_TYPE_ATTACH
Note
notes.filter(case__id=case_id
note.set_user_context([request.user]
max_length=1000
SEARCH_CONFIDENTIAL_STATUS_MAP
JSONParser
FormParser
SubmissionDocument.objects.filter
document__created_by__groups__name__in
submission__id=
key=_submission_document_type
bundle_id
raise Document
child_submission_document.set_user_context(request.user
result.append(result_item
id__in
POST
bundles[0
case_id=
bundle = bundle.new_version
bundle.set_user_context(self.user
bundle.make_live(request.user
document.set_user_context(self.user
DocumentSearchAPI(TradeRemediesApiView
NON-CONF
name="duplicate_of
self.case_role
MilestoneType
RenameField
Foreign Governments
Industrial Users of Product
name="notify_template
openpyxl
^15.0.1
bin
4.2.1
^3.1.0
uBL
https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz
^4.0.0
^3.0.0
sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
https://registry.npmjs.org/pegjs/-/pegjs-0.10.0.tgz
bin/pegjs
6.6.2
https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz
OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==
upload_to=documents.utils.upload_document_to
max_length=32
ModelAdmin
DocumentAdmin
admin.site.register(DocumentBundle
name="case_role
DocumentAPIView.as_view
path("system/
DocumentIssueAPI.as_view
CaseDocumentAPI.as_view
Download
# Document
remove_xlsx_injection_attack_chars
0004_invitation_sent_at
case_workflow.set_user_context(requested_by
value.due_date
CaseWorkflowState(BaseModel
access_log_format = os.environ.get
b)s
8f486f65-d351-4494-9e79-4b8aadda6fac
NotifyAuditReport
NotifyAuditReport.as_view
"Perform AV Scan of a document stored in S3
e.g:
File Too Large'
ClientError
MultipartEncoder
S3 Object
the AV Service
BadConfigError
MalwareDetectedError
Invokes
msg =
HTTP Basic Auth
raise exc
ExcelWriter(BaseWriter
Excel
Workbook
"Write a single row to the spreadsheet
FeedbackForm
is_enabled
ApiHealthView(APIView
GROUPS[1
title_id = request.data.get("job_title_id
job_title_id=title_id
SystemParameterApiView(TradeRemediesApiView
system_param.data_type
invitation_id
request_data["case_spec
is_active
user.remove_from_case(case_id
job_titles]}
CreatePendingUserAPI(TradeRemediesApiView
data["case_spec
isinstance(case_spec
invite.to_dict
Digraph
InvalidNode
RT = rekey(RESPONSE_TYPES
node.get('response_type
dot.node(action["id
Task'
root = root if
node["outcome_spec
key_1
node.get("children
State
ManyToManyField(HSCode
ProductManager
self.hs_codes.add(hscode
ExportSource(BaseModel
Prepare the Statement of Intended Final Determination"
Approve the Statement of Intended Final Determination"
Statement of Intended Final Determination
Publish the Statement of Intended Final Determination
DECISIONS_PUBLISH_6P6"
DECISIONS_PUBLISH_6P6
related_name="merged_from_org
name="archive_reason
# Example Trade Remedies API
DJANGO_SECRET_KEY
# Set CELERY_TASK_ALWAYS_EAGER
CELERY_TASK_ALWAYS_EAGER=
CASE_WORKER_ENVIRONMENT_KEY=
CW
http://localhost:8002
AUTH-TOKEN-FOR-TRUSTED-USER
MASTER_ADMIN_EMAIL=admin@mylocaltrade.com
a Colleague
S3_STORAGE_KEY=
AV_SERVICE_PASSWORD
contact.has_user
NotFoundApiExceptions("No
InviteThirdPartyAPI(TradeRemediesApiView
build_submission(request_user
Case Third Party
New Third Party
case_bundle = DocumentBundle.objects.filter
request_data
Build Third Party
contact.load_attributes(request_data
Organisation.objects.create
"Update the Third Party Invitee's
Invitee
organisation").get(id
UserInvitations(TradeRemediesApiView
app.config_from_object("django.conf
UserTest(TestCase
doc = load(document.file
base_dir = os.path.dirname(os.path.dirname(__file
logger.info("|= Creating
admin_user.set_password(options["password
Token.objects.filter(user
HTTP_AUTHRIZATION
get_response
META
OriginValidator
SubmissionStatusAdmin(admin
CaseAdmin(admin
CaseWorkflowAdmin(admin
SectorAdmin
ProductAdmin
ModelSecurity
Applicant
CONTRIBUTOR_ORG_CASE_ROLE
@get_security_group.register(str
CaseAction(models
CaseRole(models
OrganisationCaseRoleManager(models
approved_by=approved_by
approved_at=approved_at
case_role.set_user_context(created_by
Organisation Administrator
#                 
CASE_REJECTED_BY_TRA
FeatureFlagApiView
FeedbackExport
path("systemparam/
NotificationTemplateAPI.as_view
Group.objects.create(name="Test Role
assert group.user_set.filter(id
Document.objects.create(name="Doc 1
assert len(value
assert value[1
assert value
assert isinstance(value
unittest.mock import patch
BadRequest
retry.assert_called_once_with
Mock(spec
def user(mocker
"Fake User
case(mocker
INFO
test_log_deleted_user(caplog
bad_user
NoneType
UserSerializer
OrganisationSerializer
CaseSerializer
UserList(APIView
Response(serializer.data
UserDetail(APIView
OrganisationList(APIView
OrganisationDetail(APIView
CaseList(APIView
CaseDetail(APIView
RemoveField
ON o1.name
WHERE o1.duplicate_of_id
Pick
SystemParameter.get("NOTIFY_ORGANISATION_MERGED
notify_footer(notify_contact_email
organisation = Organisation
organisation.set_user_context(user
organisation_id
user_filter["created_by
uc["case_id
self.companies_house_id
self.duns_number
self.case_context
contacts = self.casecontact_set.select_related
Organisation's
f"User
name="due_date
Q(created_by__groups__name__in
publish_non_conf_interested_parties
"Documents for a submission
SubmissionDocuments
latest.refresh_from_db
sub_doc.delete
self.submission_documents
doc.created_by.is_tra
self.doc_reviewed_at
param str
FRIENDLY_DATE_FORMAT
self.case.latest_notice_of_initiation_url
NOTIFY_SUBMISSION_DEFICIENCY
str(subdoc.document.id
case_bundle =
kwargs.values
test+
"Base Writer
"Write a single row
upload_to=
workflow.templatetags import register
name=
InvitationAdmin
Robert Meredith
Luisella Strona
https://avatars1.githubusercontent.com/u/36708790?v=4
Mark Higham
Paul Cooney
Krishna White"
Brendan Quinn
CaseList
assert Case.objects.all().count
815893cb-fc21-498d-a88a-1f9bb911b030
Install Python
max_length=4
received_at
ApiTestConfig(AppConfig
postgres:10.15
Generate S3
S3 Credentials
s3_access_key}
configfile.write(config.strip
credentialsfile.write(credentials.strip
{HOME}/trade_remedies_api
ContactsAPI(TradeRemediesApiView
get_case(case_id
ContactLookup
ContactLookup.as_view
keys = keys
f"Invalid
BaseModel(SimpleBaseModel
r'"\g<0
json.loads(json_str
MethodType
isinstance(val
hasattr(val
to_json
self.assertEqual(updated_status.ack_at
OrganisationDetail
UserDetail
CaseDetail
CaseDetail.as_view
OrganisationList.as_view
OrganisationDetail.as_view
Elasticsearch
ES
ElasticSearch
HOST
http://stackoverflow.com/questions/110803/dirty-fields-in-django
assert number
context.tests_count
# Organisation's
process_timegate_action.delay(workflow_state_id
status.ack_at
Measure Expired
#     parse(latest_expiry.value).date

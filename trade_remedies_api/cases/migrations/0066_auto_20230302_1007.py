# Generated by Django 3.2.17 on 2023-02-17 15:05

from django.db import migrations


def update_case_types(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    CaseType = apps.get_model("cases", "CaseType")
    db_alias = schema_editor.connection.alias

    # update 'after' and 'before' limits on all reviews except
    # "Repayment investigation", setting all to 0
    reviews = CaseType.objects.using(db_alias).filter(meta__review=True)

    for review in reviews:
        if not review.name == "Repayment investigation":
            for each_dict in review.meta["criteria"]:
                if "criterion" in each_dict.keys():
                    if each_dict["criterion"] in ("after", "before"):
                        # update the value
                        each_dict["value"] = 0
            review.save()


def create_new_case_type(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    CaseType = apps.get_model("cases", "CaseType")
    WorkflowTemplate = apps.get_model("workflow", "WorkflowTemplate")
    db_alias = schema_editor.connection.alias

    # create new case type if it doesn't already exist
    if (
        not CaseType.objects.using(db_alias)
        .filter(name__iexact="Suspension Extension review")
        .exists()
    ):
        workflow_queryset = WorkflowTemplate.objects.using(db_alias).filter(
            id="c83c0c75-a04d-4212-a942-eb35855c60fe",  # /PS-IGNORE
        )

        CaseType.objects.using(db_alias).create(
            name="Suspension Extension review",
            acronym="SN",
            order=150,
            colour="#6F777B",
            workflow=workflow_queryset.last() if workflow_queryset else None,
            meta={
                "review": "true",
                "criteria": [
                    {
                        "criterion": "after",
                        "milestone": "MEASURE_COMMENCEMENT",
                        "value": 0,
                        "unit": "days",
                    },
                    {
                        "criterion": "before",
                        "milestone": "MEASURE_EXPIRY",
                        "value": 0,
                        "unit": "days",
                    },
                    {"criterion": "parent_case_types", "value": []},
                ],
            },
        )


class Migration(migrations.Migration):
    dependencies = [
        ("cases", "0065_auto_20221214_1203"),
    ]

    operations = [
        migrations.RunPython(update_case_types),
        migrations.RunPython(create_new_case_type),
    ]

"""
Django settings for trade_remedies_api project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import sys
import os
import datetime
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
import dj_database_url

from django_log_formatter_ecs import ECSFormatter

# We use django-environ but do not read a `.env` file. Locally we feed
# docker-compose an environment from a local.env file in the project root.
# In our PaaS the service's environment is supplied from Vault.
#
# NB: Some settings acquired using `env()` deliberately *do not* have defaults
# as we want to get an `ImproperlyConfigured` exception to avoid a badly
# configured deployment.
root = environ.Path(__file__) - 4
env = environ.Env(
    DEBUG=(bool, False),
)

sentry_sdk.init(
    dsn=env("SENTRY_DSN", default=""),
    integrations=[DjangoIntegration(), CeleryIntegration()],
    environment=env("SENTRY_ENVIRONMENT", default="local"),
)

SITE_ROOT = root()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")
# Allow/disallow django admin
DJANGO_ADMIN = env("DJANGO_ADMIN", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost"])

ORGANISATION_NAME = env("ORGANISATION_NAME", default="Organisation name placeholder")

ORGANISATION_INITIALISM = env("ORGANISATION_INITIALISM", default="PLACEHOLDER")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_countries",
    "rest_framework",
    "rest_framework.authtoken",
    "storages",
    "core",
    "security",
    "cases",
    "organisations",
    "documents",
    "audit",
    "notes",
    "tasks",
    "content",
    "workflow",
    "contacts",
    "invitations",
    "axes",
    "feedback",
    "reports",
]

MIDDLEWARE = [
    "trade_remedies_api.middleware.ApiTokenSetter",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "axes.middleware.AxesMiddleware",
]

if DJANGO_ADMIN:
    MIDDLEWARE = [
        "whitenoise.middleware.WhiteNoiseMiddleware",
    ] + MIDDLEWARE

ROOT_URLCONF = "trade_remedies_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "..", "."),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesBackend",
    "django.contrib.auth.backends.ModelBackend",
]

WSGI_APPLICATION = "trade_remedies_api.wsgi.application"

_VCAP_SERVICES = env.json("VCAP_SERVICES", default={})

if "postgres" in _VCAP_SERVICES:
    _database_uri = f"{_VCAP_SERVICES['postgres'][0]['credentials']['uri']}"
    DATABASES = {
        "default": {
            **dj_database_url.parse(
                _database_uri,
                engine="postgresql",
                conn_max_age=0,
            ),
            "ENGINE": "django_db_geventpool.backends.postgresql_psycopg2",
            "OPTIONS": {
                "MAX_CONNS": env("DB_MAX_CONNS", default=10),
            },
        },
    }
else:
    DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "core.password_validators.UpperAndLowerCase",
    },
    {
        "NAME": "core.password_validators.ContainsSpecialChar",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = "core.User"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
PUBLIC_ROOT_URL = env(
    "PUBLIC_ROOT_URL", default="https://trade-remedies-public-dev.london.cloudapps.digital"
)
CASEWORKER_ROOT_URL = env("CASEWORKER_ROOT_URL", default="http://localhost:8002")

API_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S%z"
API_DATE_FORMAT = "%Y-%m-%d"
FRIENDLY_DATE_FORMAT = "%-d %B %Y"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DATETIME_FORMAT": API_DATETIME_FORMAT,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}


# Redis - Trade remedies uses different redis database numbers for the Django Cache
# for each service, and for Celery.
# API:        0
# Caseworker: 1
# Public:     2
# Celery:     3
REDIS_DATABASE_NUMBER = env("REDIS_DATABASE_NUMBER", default=0)
CELERY_DATABASE_NUMBER = env("CELERY_DATABASE_NUMBER", default=3)
if "redis" in _VCAP_SERVICES:
    uri = _VCAP_SERVICES["redis"][0]["credentials"]["uri"]
    REDIS_BASE_URL = uri
    CELERY_BROKER_URL = f"{uri}/{CELERY_DATABASE_NUMBER}?ssl_cert_reqs=required"
else:
    REDIS_BASE_URL = env("REDIS_BASE_URL", default="redis://redis:6379")
    uri = env("CELERY_BROKER_URL", default="redis://redis:6379")
    CELERY_BROKER_URL = f"{uri}/{CELERY_DATABASE_NUMBER}"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_BASE_URL}/{REDIS_DATABASE_NUMBER}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

CELERY_TASK_ALWAYS_EAGER = env("CELERY_TASK_ALWAYS_EAGER", default=False)
CELERY_WORKER_LOG_FORMAT = "[%(asctime)s: %(levelname)s/%(processName)s] [%(name)s] %(message)s"

# TODO - we also have ASYNC_DOC_PREPARE - both expressing no celery - can we simplify?
RUN_ASYNC = True


# App specific switches
API_CACHE_TIMEOUT = 3  # Cache timeout in minutes
API_PREFIX = "api/v1"
DEFAULT_QUERYSET_PAGE_SIZE = 20
TRUSTED_USER_EMAIL = env("HEALTH_CHECK_USER_EMAIL")
AWS_ACCESS_KEY_ID = AWS_S3_ACCESS_KEY_ID = env("S3_STORAGE_KEY", default=None)
AWS_SECRET_ACCESS_KEY = AWS_S3_SECRET_ACCESS_KEY = env("S3_STORAGE_SECRET", default=None)
AWS_STORAGE_BUCKET_NAME = env("S3_BUCKET_NAME", default=None)
AWS_S3_REGION_NAME = env("AWS_REGION", default="eu-west-1")
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ENCRYPTION = True
# S3 client library to use
S3_CLIENT = "boto3"
# S3 Root directory name
S3_DOCUMENT_ROOT_DIRECTORY = "documents"
# Time before S3 download links expire
S3_DOWNLOAD_LINK_EXPIRY_SECONDS = env.int("S3_DOWNLOAD_LINK_EXPIRY_SECONDS", default=3600)
# Max upload size - 2GB
MAX_UPLOAD_SIZE = 2 * (1024 * 1024 * 1024)
# Set to True to prevent the creation of binary identical files
PREVENT_DUPLICATE_FILES = False
# Case worker environment key
CASE_WORKER_ENVIRONMENT_KEY = env("CASE_WORKER_ENVIRONMENT_KEY")
# Public environment key
PUBLIC_ENVIRONMENT_KEY = env("PUBLIC_ENVIRONMENT_KEY")
# Allowed origins
ALLOWED_ORIGINS = (CASE_WORKER_ENVIRONMENT_KEY, PUBLIC_ENVIRONMENT_KEY)
# Days of registration window for a case
CASE_REGISTRATION_DURATION = 15
# FILE DOWNLOAD CHUNK SIZE
STREAMING_CHUNK_SIZE = 8192
# Axes sits behind a proxy
AXES_BEHIND_REVERSE_PROXY = True
# Number of login/2fa attempts
AXES_FAILURE_LIMIT = env("AXES_FAILURE_LIMIT", default=3)
# Number of hours for failed login lock cool-off
AXES_COOLOFF_TIME = datetime.timedelta(minutes=env("FAILED_LOGIN_COOLOFF", default=10))
# Tell Axes the username field is 'email'
AXES_USERNAME_FORM_FIELD = "email"
# Reset the lock count on successful login
AXES_RESET_ON_SUCCESS = True
# Look at these http headers for axes IP address
AXES_META_PRECEDENCE_ORDER = ("HTTP_X_FORWARDED_FOR", "REMOTE_ADDR")
# Use the user agent for Axes lockouts
AXES_USE_USER_AGENT = True
# Axes only check by user name (explicit disable)
AXES_ONLY_USER_FAILURES = False
# Use a combination of username and ip for axes
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True
# Max life of password reset code in hours
PASSWORD_RESET_CODE_AGE_HOURS = env("PASSWORD_RESET_CODE_AGE", default=2)
# Two factor authentication validity duration in days
TWO_FACTOR_AUTH_VALID_DAYS = env("TWO_FACTOR_AUTH_VALID_DAYS", default=14)
# Lockout time for two factor failures
TWO_FACTOR_LOCK_MINUTES = 5
# Two factor authentication code validity (SMS delivery type) in minutes
TWO_FACTOR_CODE_SMS_VALID_MINUTES = 10
# Two factor authentication code validity (Email delivery type) in minutes
TWO_FACTOR_CODE_EMAIL_VALID_MINUTES = 20
# Number of two factor authentication attempts allowed before locking
TWO_FACTOR_ATTEMPTS = 3
# Time to cache method
METHOD_CACHE_DURATION_MINUTES = 2
# Organisation user invite life time before expiry (in hours)
ORGANISATION_INVITE_DURATION_HOURS = 24 * 3
# Asynchronous document uploads/checks
ASYNC_DOC_PREPARE = True
# Full application assessment days on receipt
DEADLINE_AFTER_ASSESSMENT_RECEIPT_DAYS = 40
# Email verify code regenerate after n minutes
EMAIL_VERIFY_CODE_REGENERATE_TIMEOUT = 15
# Id for the SOS organisation (fixed)
SECRETARY_OF_STATE_ORGANISATION_ID = "8850d091-e119-4ab5-9e21-ede5f0112bef"
# Elastic search host and port. ELASTIC_HOST/PORT are offered as
# fallback when VCAP is not set by the environment
ELASTIC_HOST = env("ELASTIC_HOST", default=None)
ELASTIC_PORT = env("ELASTIC_PORT", default=None)
ELASTIC_URI = None
elastic_vcap_config = _VCAP_SERVICES.get("elasticsearch")
if elastic_vcap_config:
    ELASTIC_URI = elastic_vcap_config[0]["credentials"]["uri"]
# Elastic index mapping  by doc_type
ELASTIC_INDEX = {
    "document": "main",
}

# Companies House API
COMPANIES_HOUSE_API_KEY = env("COMPANIES_HOUSE_API_KEY", default=None)

# Geckoboard API
GECKOBOARD_API_KEY = env("GECKOBOARD_API_KEY", default=None)
GECKOBOARD_ENV = env("GECKOBOARD_ENV", default="dev")

AV_SERVICE_URL = env("AV_SERVICE_URL", default=None)
AV_SERVICE_USERNAME = env("AV_SERVICE_USERNAME", default=None)
AV_SERVICE_PASSWORD = env("AV_SERVICE_PASSWORD", default=None)

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_DEFAULT_ACL = None

# Add the EU as a country
COUNTRIES_OVERRIDE = {
    "EU": "European Customs Union",
}

STATICFILES_DIRS = []

GOV_NOTIFY_API_KEY = env("GOV_NOTIFY_API_KEY", default=None)

AXES_ENABLED = env("AXES_ENABLED", default=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "stdout": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["stdout"],
        "level": env("ROOT_LOG_LEVEL", default="INFO"),
    },
    "loggers": {
        "django": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.server": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_SERVER_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.request": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_REQUEST_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": [
                "stdout",
            ],
            "level": env("DJANGO_DB_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
    },
}

ENVIRONMENT_LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "ecs_formatter": {
            "()": ECSFormatter,
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "ecs": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "ecs_formatter",
        },
    },
    "root": {
        "handlers": [
            "ecs",
        ],
        "level": env("ROOT_LOG_LEVEL", default="INFO"),
    },
    "loggers": {
        "django": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.server": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_SERVER_LOG_LEVEL", default="ERROR"),
            "propagate": False,
        },
        "django.request": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_REQUEST_LOG_LEVEL", default="ERROR"),
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": [
                "ecs",
            ],
            "level": env("DJANGO_DB_LOG_LEVEL", default="ERROR"),
            "propagate": False,
        },
    },
}

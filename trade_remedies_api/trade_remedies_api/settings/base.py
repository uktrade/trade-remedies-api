"""
Django settings for trade_remedies_api project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import json
import sys
import os
import datetime
import ssl
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
import dj_database_url

root = environ.Path(__file__) - 4
env = environ.Env(DEBUG=(bool, False),)
environ.Env.read_env()

sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN"),
    integrations=[DjangoIntegration(), CeleryIntegration()],
    environment=os.environ.get("SENTRY_ENVIRONMENT"),
)

SITE_ROOT = root()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "FALSE").upper() == "TRUE"
# Dis/Allow django admin
DJANGO_ADMIN = os.environ.get("DJANGO_ADMIN", "FALSE").upper() == "TRUE"

ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")

ORGANISATION_NAME = os.environ.get("ORGANISATION_NAME", "Organisation name placeholder")

ORGANISATION_INITIALISM = os.environ.get("ORGANISATION_INITIALISM", "PLACEHOLDER")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_countries",
    "rest_framework",
    "rest_framework.authtoken",
    "storages",
    "core",
    "security",
    "cases",
    "organisations",
    "documents",
    "audit",
    "notes",
    "tasks",
    "content",
    "workflow",
    "contacts",
    "invitations",
    "axes",
    "feedback",
    "reports",
    # 'silk'
]

MIDDLEWARE = [
    "trade_remedies_api.middleware.ApiTokenSetter",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "axes.middleware.AxesMiddleware",
]

if DJANGO_ADMIN:
    MIDDLEWARE = ["whitenoise.middleware.WhiteNoiseMiddleware",] + MIDDLEWARE

if "silk" in INSTALLED_APPS:
    MIDDLEWARE.append("silk.middleware.SilkyMiddleware")
    SILKY_PYTHON_PROFILER = True
    SILKY_META = True

ROOT_URLCONF = "trade_remedies_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "..", "."),],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesBackend",
    "django.contrib.auth.backends.ModelBackend",
]

WSGI_APPLICATION = "trade_remedies_api.wsgi.application"

_VCAP_SERVICES = env.json("VCAP_SERVICES", default={})

if "postgres" in _VCAP_SERVICES:
    _database_uri = f"{_VCAP_SERVICES['postgres'][0]['credentials']['uri']}"
    DATABASES = {
        "default": {
            **dj_database_url.parse(_database_uri, engine="postgresql", conn_max_age=0,),
            "ENGINE": "django_db_geventpool.backends.postgresql_psycopg2",
            "OPTIONS": {"MAX_CONNS": int(os.environ.get("DB_MAX_CONNS", "10")),},
        },
    }
else:
    DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 8,},
    },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
    {"NAME": "core.password_validators.UpperAndLowerCase",},
    {"NAME": "core.password_validators.ContainsSpecialChar",},
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = "core.User"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
PUBLIC_ROOT_URL = os.environ.get(
    "PUBLIC_ROOT_URL", "https://trade-remedies-public-dev.london.cloudapps.digital"
)
CASEWORKER_ROOT_URL = os.environ.get("CASEWORKER_ROOT_URL")
# if DJANGO_ADMIN:
#     STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

API_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S%z"
API_DATE_FORMAT = "%Y-%m-%d"
FRIENDLY_DATE_FORMAT = "%-d %B %Y"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DATETIME_FORMAT": API_DATETIME_FORMAT,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

# Trade remedies uses different redis database numbers
# Public Django cache - 2
# Caseworker Django cache - 1
# API Django cache - 0
# Â API Celery - 2 TODO find out if this should be a different value to public

# Redis
if "redis" in _VCAP_SERVICES:
    REDIS_BASE_URL = _VCAP_SERVICES["redis"][0]["credentials"]["uri"]
else:
    REDIS_BASE_URL = os.getenv("REDIS_BASE_URL")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_BASE_URL}/0",
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient",},
    },
}

# App sepcific switches
# Cache timeout in minutes
API_CACHE_TIMEOUT = 3
API_PREFIX = "api/v1"
DEFAULT_QUERYSET_PAGE_SIZE = 20
TRUSTED_USER_TOKEN = os.environ.get("HEALTH_CHECK_USER_TOKEN")
TRUSTED_USER_EMAIL = os.environ.get("HEALTH_CHECK_USER_EMAIL")
AWS_ACCESS_KEY_ID = AWS_S3_ACCESS_KEY_ID = os.environ.get("S3_STORAGE_KEY")
AWS_SECRET_ACCESS_KEY = AWS_S3_SECRET_ACCESS_KEY = os.environ.get("S3_STORAGE_SECRET")
AWS_STORAGE_BUCKET_NAME = os.environ.get("S3_BUCKET_NAME")
AWS_S3_REGION_NAME = AWS_DEFAULT_REGION = os.environ.get(
    "AWS_REGION", "eu-west-1"
)  # "eu-west-1" looks like a legacy setting, TODO investigate if used in prod
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ENCRYPTION = True
# S3 client library to use
S3_CLIENT = "boto3"
# S3 Root directory name
S3_DOCUMENT_ROOT_DIRECTORY = "documents"
# Time before S3 download links expire
S3_DOWNLOAD_LINK_EXPIREY_SECONDS = 30
# Max upload size - 2GB
MAX_UPLOAD_SIZE = 2 * (1024 * 1024 * 1024)
# Set to True to prevent the creation of binary identical files
PREVENT_DUPLICATE_FILES = False
# timeout in minutes for 2FA code expiry
DURATION_2FA_CODE = 5
# Case worker environment key
CASE_WORKER_ENVIRONMENT_KEY = os.environ.get("CASE_WORKER_ENVIRONMENT_KEY")
# Public environment key
PUBLIC_ENVIRONMENT_KEY = os.environ.get("PUBLIC_ENVIRONMENT_KEY")
# Allowed origins
ALLOWED_ORIGINS = (CASE_WORKER_ENVIRONMENT_KEY, PUBLIC_ENVIRONMENT_KEY)
# Days of registration window for a case
CASE_REGISTRATION_DURATION = 15
# FILE DOWNLOAD CHUNK SIZE
STREAMING_CHUNK_SIZE = 8192
# Axes sits behind a proxy
AXES_BEHIND_REVERSE_PROXY = True
# Number of login/2fa attempts
AXES_FAILURE_LIMIT = os.environ.get("AXES_FAILURE_LIMIT", 3)
# Number of hours for failed login lock cooloff
AXES_COOLOFF_TIME = datetime.timedelta(minutes=int(os.environ.get("FAILED_LOGIN_COOLOFF", "10")))
# Tell Axes the username field is 'email'
AXES_USERNAME_FORM_FIELD = "email"
# Reset the lock count on succesful login
AXES_RESET_ON_SUCCESS = True
# Look at these http headers for axes IP address
AXES_META_PRECEDENCE_ORDER = ("HTTP_X_FORWARDED_FOR", "REMOTE_ADDR")
# Use the user agent for Axes lockouts
AXES_USE_USER_AGENT = True
# Axes only check by user name (explicit disable)
AXES_ONLY_USER_FAILURES = False
# Use a combination of username and ip for axes
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True
# Two factor auth validity duration (days)
TWO_FACTOR_VALIDITY_PERIOD = os.environ.get("TWO_FACTOR_VALIDITY_PERIOD", 14)
# Max life of password reset code in hours
PASSWORD_RESET_CODE_AGE_HOURS = os.environ.get("PASSWORD_RESET_CODE_AGE", 2)
# Lockout time for two factor failures
TWO_FACTOR_LOCK_MINUTES = 5
# Minutes a 2FA code valid for
TWO_FACTOR_MINUTES_CODE_VALID = 10
# Number of two factor attempts
TWO_FACTOR_ATTEMPTS = 3
# Time to cache method
METHOD_CACHE_DURATION_MINUTES = 2
# Organisation user invite life time before expiry (in hours)
ORGANISATION_INVITE_DURATION_HOURS = 24 * 3
# Asynchronous document uploads/checks
ASYNC_DOC_PREPARE = True
# Full application assessment days on receipt
DEADLINE_AFTER_ASSESSMENT_RECEIPT_DAYS = 40
# Email verify code regenerate after n minutes
EMAIL_VERIFY_CODE_REGENERATE_TIMEOUT = 15
# Id for the SOS organisation (fixed)
SECRETARY_OF_STATE_ORGANISATION_ID = "8850d091-e119-4ab5-9e21-ede5f0112bef"
# Elastic search host and port. ELASTIC_HOST/PORT are offered as
# fallback when VCAP is not set by the environment
ELASTIC_HOST = os.environ.get("ELASTIC_HOST")
ELASTIC_PORT = os.environ.get("ELASTIC_PORT")
ELASTIC_URI = None
elastic_vcap_config = _VCAP_SERVICES.get("elasticsearch")
if elastic_vcap_config:
    ELASTIC_URI = elastic_vcap_config[0]["credentials"]["uri"]
# Elastic index mapping  by doc_type
ELASTIC_INDEX = {
    "document": "main",
}

# Companies House API
COMPANIES_HOUSE_API_KEY = os.environ.get("COMPANIES_HOUSE_API_KEY")

# Geckoboard API
GECKOBOARD_API_KEY = os.environ.get("GECKOBOARD_API_KEY")
GECKOBOARD_ENV = os.environ.get("GECKOBOARD_ENV", "dev")

AV_SERVICE_URL = os.environ.get("AV_SERVICE_URL")
AV_SERVICE_USERNAME = os.environ.get("AV_SERVICE_USERNAME")
AV_SERVICE_PASSWORD = os.environ.get("AV_SERVICE_PASSWORD")

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_DEFAULT_ACL = None

# Add the EU as a country
COUNTRIES_OVERRIDE = {
    "EU": "European Customs Union",
}

STATICFILES_DIRS = []

GOV_NOTIFY_API_KEY = os.environ.get("GOV_NOTIFY_API_KEY")

# Trade remedies uses different redis database numbers
# Public Django cache - 2
# Caseworker Django cache - 1
# API Django cache - 0
# Â API Celery - 2 TODO find out if this should be a different value to public

if "redis" in _VCAP_SERVICES:
    credentials = _VCAP_SERVICES["redis"][0]["credentials"]

    CELERY_BROKER_URL = "rediss://:{}@{}:{}/2?ssl_cert_reqs=required".format(
        credentials["password"], credentials["host"], credentials["port"],
    )
else:
    CELERY_BROKER_URL = env("CELERY_BROKER_URL", default=None)

CELERY_TASK_ALWAYS_EAGER = os.environ.get("CELERY_TASK_ALWAYS_EAGER", "FALSE").upper() == "TRUE"
CELERY_WORKER_LOG_FORMAT = "[%(asctime)s: %(levelname)s/%(processName)s] [%(name)s] %(message)s"

RUN_ASYNC = True

AXES_ENABLED = os.environ.get("AXES_ENABLED", True)

if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "stdout": {"class": "logging.StreamHandler", "stream": sys.stdout,},
            "null": {"class": "logging.NullHandler",},
        },
        "root": {"handlers": ["stdout"], "level": os.getenv("ROOT_LOG_LEVEL", "INFO"),},
        "loggers": {
            "django": {
                "handlers": ["stdout",],
                "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
                "propagate": True,
            },
            "django.server": {"handlers": ["null"], "propagate": False,},
        },
    }
else:
    # Sentry logging
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "root": {"level": "WARNING",},
        "formatters": {
            "verbose": {
                "format": "%(levelname)s %(asctime)s %(module)s "
                "%(process)d %(thread)d %(message)s"
            },
        },
        "handlers": {
            "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "verbose"}
        },
        "loggers": {
            "django.db.backends": {"level": "ERROR", "handlers": ["console"], "propagate": False,},
        },
    }

# Generated by Django 3.2.12 on 2022-04-21 13:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

def populate_new_invitation_details(apps, schema_editor):

    from security.constants import SECURITY_GROUP_THIRD_PARTY_USER, SECURITY_GROUPS_TRA
    from security.models import OrganisationCaseRole
    from core.models import User
    from organisations.models import Organisation
    from core.models import Group
    from invitations.models import Invitation

    secretary_of_state_organisation = Organisation.objects.get(name="Secretary of State")
    third_party_group = Group.objects.get(name=SECURITY_GROUP_THIRD_PARTY_USER)
    for invitation in Invitation.objects.all():
        print("-----------------------------------------")
        inviter_user = invitation.created_by
        inviter_organisation = 'None'
        if invitation.organisation_security_group == third_party_group:
            # This is a 3rd party invite
            invited_organisation = invitation.contact.organisation
            inviter_organisation = invitation.organisation
        else:
            # A 'normal' invite
            invited_organisation = invitation.organisation
            if inviter_organisation := inviter_user.organisationuser_set.first():
                inviter_organisation = inviter_organisation.organisation
            else:
                if inviter_user.groups.filter(name__in=SECURITY_GROUPS_TRA).exists():
                    # this is the TRA user, secretary of state
                    inviter_organisation = secretary_of_state_organisation

        try:
            print(f"Invitation type is {invitation.organisation_security_group.name if invitation.organisation_security_group else None}")
            print(f"Invited organisation is {invited_organisation.name}")
            print(f"Inviter organisation is {inviter_organisation.name if inviter_organisation else None}")
            print(f"Inviter user is {inviter_user.email}")
            print(f"Case in question is {invitation.case.name}")

            invited_user = User.objects.get(email=invitation.email)
        except (AttributeError, User.DoesNotExist):
            # Something is wrong with this case, doesn't have all the required attributes
            print(f"Something is wrong with {invitation}")

        finally:
            invitation._disable_audit = True
            if inviter_org_case_role := OrganisationCaseRole.objects.get_organisation_role(
                invitation.case,
                organisation=inviter_organisation,
                outer=True
            ):
                invitation.inviter = inviter_org_case_role
                invitation.invited_user = invited_user
                invitation.invited_organisation = invited_organisation
                invitation.save()
                print(f"{invitation} successfully updated")
            else:
                try:
                    print(f"No OrganisationCaseRole object can be found for {inviter_organisation.name} for {invitation.case.name}")
                except AttributeError:
                    print(f"No Case associated with {invitation}")

class Migration(migrations.Migration):

    dependencies = [
        ('organisations', '0013_alter_organisation_json_data'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('security', '0008_userorganisationcaserole'),
        ('invitations', '0012_auto_20220207_1201'),
    ]

    operations = [
        migrations.AddField(
            model_name='invitation',
            name='invited_organisation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invitations_received', to='organisations.organisation'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='invited_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invitations_received', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='invitation',
            name='inviter',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invitations_sent', to='security.organisationcaserole'),
        ),
        migrations.RunPython(populate_new_invitation_details),
    ]

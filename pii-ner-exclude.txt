DUNS
Email Verified"
New User Created
EORI
VAT
NO_USER_AGENT
f"Order
Health Check
Super-Secret-Password1
the GOV.UK Test Number
mobile_country_code
uk_employer
new_case_role
Custom Axes Authentication
DELETE
Log Out
'Log Out'
Log Out'
TwoFactor
CustomValidationError
r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
Log In Failed
SECONDS
ValidationExceptions
ValidationErrors
Raises CustomValidationErrors
DELETE
Log Out
Log In Failed
Password Reset
Password Reset Failed
ValidationExceptions
ValidationErrors
r"(^+@+\.+$
CustomValidationError
assert app.label
"Trade Remedies Authentication
Authentication V2
EmailVerification
EmailVerificationAdmin(admin
Create User
"Create Super User
"User Model
E304
APIException
Serializer
TrustedTokenSerializer
"Trusted Auth Token Serializer
label=_("Two Factor Token
Email Verification Code Serializer
TWO_FACTOR_MAX_ATTEMPTS
"Authentication App
TokenAuthentication
Custom Token Authentication
AuthenticationFailed
ANON_USER_TOKEN
Public/CW
ELK
Grafana
do_login
login_data
response.json()["token
fake_user
assert response_data["token
two_factor_data
Bad Request
valid_minutes_2fa_token
# Post
test_2fa_resend(fake_user
actual_user_data
assert response.json()["2fa
anon_user_data
assert response.json()["username
test_auth_token_expired(fake_user
assert authorised_api_client.get("/api
v2/auth/users/").status_code
serializer
https://github.com/yezyilomo/django-restql/
doc.id
Django==2.2.25
 FeatureFlags
get_param
doc = load(document.file
\n
TOML
py37
UserContext
UserContextTest(TestCase
assert isinstance(as_user_context
assert
assert as_none
assert as_user_context.user.id =
datetime(2019
self.case.refresh_from_db
self.assertEqual(updated_status.ack_at
DLL
env/
var/
PyInstaller
# Installer
pip-delete-this-directory.txt
local_settings.py
Scrapy
Sphinx
PyBuilder
Jupyter Notebook
ENV/
# Rope
# Mac
Organisation
AttributeError
f"User
core.services.base
ResponseSuccess
audit.models import
Audit
get_case
QuerysetExporter
case_id
param
HTTPRequest
created_by
AuditTrailExport(TradeRemediesApiView
Generate
@staticmethod
QuerysetExport
NotifyAuditReport(TradeRemediesApiView
Acknowledge
audit_id
audit =
get_role
CaseRole
Group
DocumentBundle
invitation_id
TRA
contact_id
contact.has_user
NotFoundApiExceptions("No
InviteThirdPartyAPI(TradeRemediesApiView
build_submission(request_user
Case Third Party
New Third Party
case_bundle = DocumentBundle.objects.filter
request_data
Build Third Party
contact.load_attributes(request_data
Organisation.objects.create
"Update the Third Party Invitee's
Invitee
organisation").get(id
invite.to_dict
UserInvitations(TradeRemediesApiView
Django 2.0.1
name="case_role
@method_cache
boto3==1.17.88
celery==4.4.0
colour==0.1.5
django-appconf==1.0.4
django-countries==5.5
django-dirtyfields==1.7.0
django-redis==4.10.0
docopt==0.6.2
et-xmlfile==1.1.0
openpyxl
freezegun==1.1.0
jdcal==1.4.1
pyjwt==2.1.0
vine==1.3.0
#   amqp
werkzeug==0.15.3
SmallIntegerField(default=0
LoadExtension
#        LoadExtension('pg_trgm'
OrganisationUser
Group, Permission
GROUPS
# Setup/Bootsrapping
Permission
exc_info
BaseWriter
ExcelWriter(BaseWriter
Excel
Workbook
"Write a single row to the spreadsheet
REJECTED_ORG_CASE_ROLE
SystemParameter
# Set
# Set cookie
JS
CRSF
# Set anti XSS
AUDIT_LOG_USER_FIELD
the X-Frame-Options
DENY
NullBooleanField
ImportError
exc
PYTHONPATH
django.contrib import
ModelAdmin
DocumentAdmin
admin.site.register(DocumentBundle
NotFoundApiExceptions
pluck
audit import
CaseContact
OrganisationsAPIView(TradeRemediesApiView
#
NotFoundApiExceptions('Invalid
merge_org =
Organisation.objects.get(id
C901
user->org
OrganisationApprovalNotifyAPI(TradeRemediesApiView
values.get("previous_role
case.assign_user(submission.created_by
OrganisationCaseRoleAPI(TradeRemediesApiView
LOA
usercase.case.to_minimal_dict
CeleryIntegration
django_log_formatter_ecs
Vault
NB
ImproperlyConfigured
default=
Build
# Quick
# See
# Application
DIRS
OPTIONS
_database_uri =
f"{_VCAP_SERVICES['postgres'][0]['credentials']['uri
_database_uri
MAX_CONNS
https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
NAME
min_length
Europe
Y-%m-%dT%H:%M:%S%z
# Redis - Trade
the Django Cache
Celery
Caseworker
message)s
env("AWS_REGION
default="eu
S3 Root
Max
# Set to True
CASE_WORKER_ENVIRONMENT_KEY = env("CASE_WORKER_ENVIRONMENT_KEY
PUBLIC_ENVIRONMENT_KEY =
FILE
Reset
HTTP_X_FORWARDED_FOR
REMOTE_ADDR
Time
# Organisation
ORGANISATION_INVITE_DURATION_HOURS
Asynchronous
Elastic
VCAP
elastic_vcap_config
Companies House
COMPANIES_HOUSE_API_KEY = env("COMPANIES_HOUSE_API_KEY
Geckoboard API
EU
European Customs Union
StreamHandler
ECSFormatter
Token
base_dir = os.path.dirname(os.path.dirname(__file
help="User
logger.info("|= Creating
admin_user.set_password(options["password
Token.objects.filter(user
AUDIT_TYPE_PURGE
AUDIT_TYPE_RESTORE
Audit(models
Purge
Log In"
Log Out
Event
ForeignKey(ContentType
self.data["case_title
case_title
self.data
Audit Type
Audit Content
row_data.get("content_type
self.data.items
hasattr(value
LogHumaniser
f"Error
self.data.get("id
isinstance(spec
import hashlib
django.core.cache
md5.hexdigest
kwargs.values
OrganisationDetail
UserDetail
UserList
CaseDetail
CaseDetail.as_view
OrganisationList.as_view
OrganisationDetail.as_view
OperationalError
IntegrityError
parent.data
ON
NOTIFY
SELECT a.id
a.data
ON a.id=
b.id
Audit.objects.raw(SQL
SmallIntegerField
self.default
Presentation
hasattr(shape
CaseRolesAPI.as_view
TruncDate
User.objects.filter
3246cf3a-179e-48df-a92d-4725ab12179d
2071db92-4ebd-4e27-
REGISTRATION_SOFT_LOCK_KEY
FEATURE_ORGANISATION_ADMIN
TRADE_REMEDIES_EMAIL_DOMAIN
4e7e9a27-d96f-401c-b8e3
NOTIFY_EMAIL_EXISTS
HS
InvitationAdmin
SubmissionType
PASSWORD
A7Hhfa!jfaw@f
WSGI
MIT License
Department for International Trade
Software
IMPLIED
DAMAGES
LIABILITY
OrganisationCaseRoleInline(admin
OrganisationUserInline(admin
# Example Trade Remedies API
DJANGO_SECRET_KEY
# Set CELERY_TASK_ALWAYS_EAGER
CELERY_TASK_ALWAYS_EAGER=
CASE_WORKER_ENVIRONMENT_KEY=
CW
http://localhost:8002
AUTH-TOKEN-FOR-TRUSTED-USER
MASTER_ADMIN_EMAIL=admin@mylocaltrade.com
a Colleague
S3_STORAGE_KEY=
AV_SERVICE_PASSWORD
"Base Writer
"Write a single row
BaseModel
created_at
Transitional Anti-subsidy Review
Label
Finalise
one 10
TO_BE_INITIATED
Register
INV_POST_VERIFY_UPDATE_ANALYSIS
The Statement of Essential Facts
the Statement of Essential
the Statement of Essential Facts
FINAL_DET_ANALYSIS
FINAL_DET_ANALYSIS_INJURY_CALCS
FINAL_DET_ANALYSIS_NOTES
FINAL_DET_ANALYSIS_EI_TESTS
DIT
FINAL_DET_PREP_SOS
Correspondence  for SoS prepared
FINAL_DET_PREP_QA
FINAL_DET_APPROVE_TRA
FINAL_DET_PUBLISH_LABEL
FINAL_DET_PUBLISH_GOV
WTO
FINAL_DET_PUBLISH_FILE
MEASURE_COMMENCEMENT
RECONSIDERATION_TEAM_ASSIGNED
RECON_CHECK_FOR_REQUESTS_RECEIVED
RECON_INIT_DECISION_LABEL
RECON_INIT_DECISION_TRA
RECON_PUBLISH_INIT_UPLOADED
RECON_PUB_FIN_DET
DRAFT_RECEIVED
INIT_AS_INFORM
Close
Verification
Correspondence for SoS prepared
PROV_PREPARE_REVIEW
PROV_FACTS_FACTS_PUBLISHED
UserProfile
AlterField
upload_to=
Org A"
Org A"  #
Case X"
Owner
notify_contact_email
accepted_by
meta
{User
organisation {Organisation}
Keyword Arguments
requested_by
InvitationManager
approved_by
{User}
"Assign Organisation User
USER
Submission
SubmissionType.objects.get(id
approved_by=self.created_by
approved_at
# Assign
the Third Party's
InvalidAccess
assert isinstance(result
Create Application
View Application
Upload Document
Download Document
Create Applicant
Deactivate Applicant"
DONLOAD_QUESTIONNAIRE
Download Questionnaire
View Case
WorkflowTemplate
parent_id
F821
CountryField
ContactManager(models
E164
Contact(BaseModel
CharField(max_length=80
DoesNotExist
self.country.code
organisation {Organisation} -- Organisation
CaseContact(SimpleBaseModel
815893cb-fc21-498d-a88a-1f9bb911b030
State
CaseWorkflow
self.model_key
ExportSource
ModelSerializer
organisation_name="Test Organisation
validated_data
TEST_EMAIL
Transitional Anti-dumping Review
logger.info("By
context.organisation.assign_user(context.user
context.organisation.assign_user(test_user
assert test_org.has_user_role(context.user
Org A"'
@when("I
SubmissionStatus
d.
UUID
@get_submission_type.register(str
NoteAPIView
NoteAPIView.as_view
CaseStage
get_case_fixtures(*extra
load_system_params
https://api.notifications.service.gov.uk/v2/notifications/
assert type(reset
PasswordResetRequest
assert bool(reset.code
PasswordResetRequest.objects.password_reset(code
assert type(reset_user
assert self.user
ContactLookup
ContactLookup.as_view
CaseInitiationAPIView
ProductsAPIView
ProductHSCodeAPI
CaseStatusAPI
ReviewTypeAPIView
API_CACHE_TIMEOUT)(CaseEnumsAPI.as_view
CaseStateAPI.as_view
CaseParticipantsAPI.as_view
organisation_id>/all/
CaseStatusAPI.as_view
CaseUsersAPI.as_view
SubmissionsAPIView.as_view
SubmissionNotifyAPI.as_view
# Export Source
# Set Review
CaseWorkflowAPI.as_view
CaseList
assert Case.objects.all().count
APIView
HTTPError
ResponseError
User
@method_decorator(csrf_exempt
"Authentication View
Valid
Responds
user.deleted_at
Forgotten
user.is_active
user.refresh_from_db
"Perform Authentication
RegistrationAPIView(APIView
key.replace
# Third Party's
request.user.refresh_from_db
two_factor.fail(
bool(user
RUN_ASYNC =
Elasticsearch
ES
ElasticSearch
get_open_search
HOST
Selection
getLogger
non_conf
Home
Home.as_view
URLconf
core.services import auth
API_PREFIX}/security/groups/<str
AssignUserToCaseView.as_view
CreatePendingUserAPI.as_view
MyAccountView.as_view
API_PREFIX}/document/
admin.site.urls
RenameField
ManyToManyField(HSCode
ProductManager
self.hs_codes.add(hscode
ExportSource(BaseModel
name="estimated_duration
STATE_INCOMPLETE
index.setdefault(index_key
KeyError
dict_.items
Convert
British
Mark
source.get(field
crsr.execute(sql
lt(val_a
value[1
Generate S3
S3 Credentials
s3_access_key}
configfile.write(config.strip
credentialsfile.write(credentials.strip
name="node_type
Mock(spec
def user(mocker
"Fake User
case(mocker
INFO
test_log_deleted_user(caplog
bad_user
NoneType
SubmissionDocument
SubmissionStatusAdmin(admin
CaseAdmin(admin
CaseWorkflowAdmin(admin
SectorAdmin
ProductAdmin
self.__class__.__name
Ariel Malka'
Harel Malka'
to_value
elif isinstance(value
models.fields.files
instance._user_context.user
param kwargs
PURGE
deleted_at
EVENT
audit log
audit log case
Response
UserSerializer
OrganisationSerializer
CaseSerializer
UserList(APIView
Response(serializer.data
UserDetail(APIView
OrganisationList(APIView
OrganisationDetail(APIView
CaseList(APIView
CaseDetail(APIView
Super User
TRA Administrator
Organisation Owner
Organisation User
Third Party User
GROUP_PERMISSIONS["Third Party
the Super User
# Setup/Boot
name="block_reason
PermissionsMixin
DEFAULT_USER_PERMISSIONS
UserCase
UserExists
SAFE_COLOURS
UserManager(BaseUserManager
raise UserExists("Email
# Will
# Determine Organisation
# Contact
create_pending_user
# Will raise
Validation Error
set_verified
self.userprofile.timezone
modified_by
duplicate_of
OrganisationUser.objects.assign_user
user_org =
user_org
self.login_code
case_specs =
json.loads(case_specs
case_spec
Healthcheck
case.remove_user
Sync
Assert
TWO_FACTOR_AUTH_VALID_DAYS
member_of
OneToOneField(User
CharField(max_length=8
job_title
self.job_title
self.locked_until
self.validity_period_for(self.delivery_type
PasswordResetManager(models
user__id
Raises ValidationError
PasswordResetRequest(models
un
self.user.is_tra
SystemParameter.get("NOTIFY_RESET_PASSWORD
Default Case'
Boolean
elif self.data_type
SP
key.upper
Action
INFORM_FOREIGN_GOVERNMENT
NODE_2
Workflow Templates
a Task
request.data.get("id
request.data.get("model_id
content_type=_content_type
user_context=[request.user]
JobTitle
self.print_warning(f"'{from_initialism} Document'
# workflow_template_anti_dumping.json
workflow_template_anti_subsidy.json
workflow_template_trans_safeguards.json
Safeguarding
json_txt = json.dumps(workflow.template
json_txt
updated_json_txt = json_txt.replace
LEGACY_ORGANISATION_NAME
name="archive_reason
ArchiveReason
local.env
Dev
ClamAV
GOV_NOTIFY_API_KEY`  | Yes | API
SRE
https://github.com/uktrade/trade-remedies-docker
Revert
Trade Remedies
BDD
src="https://avatars3.githubusercontent.com
Malka</b></sub></a><br
📖</a
Pull
href="https://github.com
Robert Meredith</b></sub></a><br /><a
href="https://github.com/
href="https://github.com/nao360"><img src="https://avatars3.githubusercontent.com/u/6898065?v=4?s=100
Paul Cooney</b></sub></a><br
Brendan Quinn</b></sub></a><br /><a href="https://github.com
CSV Writer
self.csv
csv
"Write a single row to the csv file
Content
Document
OrganisationName
OrganisationUser.objects.all().delete
id__in=["815893cb-fc21-498d-a88a-1f9bb911b030
LOGOUT
CreateModel
AutoField
bases=
AuditableMixin
upload_to=documents.utils.upload_document_to
max_length=32
CommandError(f"User
# assign 'Organisation User'
f"Security
FeedbackForm
is_enabled
ApiHealthView(APIView
GROUPS[1
title_id = request.data.get("job_title_id
job_title_id=title_id
SystemParameterApiView(TradeRemediesApiView
system_param.data_type
request_data["case_spec
is_active
user.remove_from_case(case_id
Q(status__draft=True
job_titles]}
CreatePendingUserAPI(TradeRemediesApiView
data["case_spec
isinstance(case_spec
0004_invitation_sent_at
Operation
to_state
UI
Tick
YES_NO_NA
TIMER
8f486f65-d351-4494-9e79-4b8aadda6fac
postgres:10.15
name="duplicate_of
max_length=1000
F401
row.cells
COLOUR_GREEN=\033[32;01
COLOUR_YELLOW=\033[33;01
dev-requirements$(COLOUR_NONE
BasePermission
BaseParser
ParseError
AccessDenied
GroupPermission(BasePermission
group).user_set.filter(id
all Trade Remedies API Views
API Exception
SystemParameters
GroupPermission
the API View Object
int(request.query_params.get("start
raise AccessDenied("User
Parser
MultiPartJSONParser
Media Type
DjangoMultiPartParser(meta
DataAndFiles(_data
OrganisationNonResponsiveToggleAPI
OrganisationUsersAPI.as_view
name="job_role
to_date
role_id
RepresentingAPI(TradeRemediesApiView
BaseOutcome
MY_OUTCOME
key_values=
key_values
key_values={"KEY_1
self.setup_outcome(self.get_if_eq_na_spec
NA
self.setup_outcome(self.get_chained_if_spec
self.setup_outcome(self.get_composed_or_if_eq_spec
E722
E203
import_order_style
WorkflowTemplateAPI.as_view
CaseAction
OrganisationUserAdmin(admin
OrganisationCaseRoleAdmin(admin
admin.site.register(OrganisationUser
CaseRoleAdmin
logger.debug("Spec
self.eval_operator(operator_name
in_list
register_report(report_func
REPORT_REGISTRY
Application
8aadc503-c1a5-427f-808b-88e794e2f919
Case Initiated
3a592eb0-0ea2-423f-b75a-237ae6f52095
167b7f0d-ecf5
-be81-44f1-a0d6
STATEMENT_OF_INTENDED_FINAL_DETERMINATION_RESPONSE_WINDOW_OPEN
Responses to Statement of Essential Facts
a5cde51d-d781-4876-beb8
39ad74e8-631a-4196-bffd-5241e35bf5e8
25dd3547-e321-4b3f-8ad1
Document.objects.create(name="Doc 1
assert len(value
assert value[1
assert value
assert isinstance(value
keys = keys
JSONField
f"Invalid
BaseModel(SimpleBaseModel
r'"\g<0
json.loads(json_str
MethodType
isinstance(val
hasattr(val
to_json
DECISIONS_REASONS
DECISIONS_JUSTIFY
DECISIONS_SOS
Prepare the Statement of Intended Final Determination"
Approve the Statement of Intended Final Determination"
Statement of Intended Final Determination
Publish the Statement of Intended Final Determination
DECISIONS_PUBLISH_6P6"
DECISIONS_PUBLISH_6P6
FINAL_DET_PREP_DIT_TARIFF
cases.publish_non_conf_interested_parties
cases.case_admin
cases.workflow_editor
CASE_WORKER_ENVIRONMENT_KEY
PUBLIC_ENVIRONMENT_KEY
self.assertEqual(audit.assisted_by_id
Document.objects.create(name="Test Document
assert audit.model_id
submission_id
self.assertEqual(audit.created_at
self.assertEqual(row[1
str(audit.case
assert audit
get_dataset
client.datasets.find_or_create
DATASETS[key]["mode
dataset.put(data
ContactsAPI(TradeRemediesApiView
get_case(case_id
django-db-geventpool==3.1.0
gunicorn==20.0.4
Content 1"
Content 2
Content 1
assert len(tree
Child 2
CaseType
self.organisation.assign_user(self.user_2
self.assertEqual(response.status_code
SubmissionAPITest(APITestCase
APISetUpMixin
Submission.objects.create
Questionnaire
trade_remedies_api &&
CASE_TYPE_ANTI_SUBSIDY
# Organisation's
SUBMISSION_TYPE_NOTICE_OF_INITIATION
TRA_ORGANISATION_ID
roi_by_date
OuterRef
DECISION_TO_INITIATE_KEY
Organisation, get_organisation
contact.set_user_context(user
user_context=[user
Case Created"
param organisation: Organisation
org_role
OuterRef("pk
CaseManager
cws.value
CaseWorkflowState.objects.get_or_create
PUBLIC_ROOT_URL}/public/case/{self.reference}/
OrganisationCaseRole.objects.has_organisation_case_role
InvalidAccess(f"User
evidence_of_subsidy
dict["archive_reason
self.registration_deadline
assign_user
submission_request_name
next_action_obj
stage_id
audit_dict["assisted_by_id
audit_dict["model_id
report[key][sub_key].append(audit.parent_id
OSError
raise Exception(path
max_length=4
CharField(max_length=50
doc_reviewed_at
received_at
IntegerField
name =
case_workflow.set_user_context(requested_by
value.due_date
CaseWorkflowState(BaseModel
FeatureFlagApiView
FeedbackExport
path("systemparam/
NotificationTemplateAPI.as_view
pdf
unittest.mock import patch
BadRequest
retry.assert_called_once_with
NotifyAuditReport
NotifyAuditReport.as_view
A1
A2
self.caseX.assign_user(self.userA1
self.organisationA
assert self.caseX.has_organisation(self.organisationA
assert self.caseX.has_organisation(self.organisationB
assert self.caseY.has_organisation(self.organisationB
assert self.userA1.can_do("UPLOAD_DOCUMENT
User A2
self.organisationB.assign_user(self.userL1
self.caseY.assign_organisation_user(self.userL1
assert set(self.userL2.userprofile.all_organisations
assert list(self.userA1.get_cases(self.organisationA
assert list(self.userA1.get_cases(self.organisationB
assert list(self.userA2.get_cases(self.organisationA
assert list(self.userA2.get_cases(self.organisationB
assert list(self.userB1.get_cases(self.organisationA
assert list(self.userB1.get_cases(self.organisationB
assert list(self.userB1.get_cases(self.organisationC
assert list(self.userB2.get_cases(self.organisationA
assert list(self.userB2.get_cases(self.organisationB
assert list(self.userB2.get_cases(self.organisationC
assert list(self.userL1.get_cases(self.organisationA
assert list(self.userL1.get_cases(self.organisationB
assert list(self.userL2.get_cases(self.organisationA
assert list(self.userL2.get_cases(self.organisationB
assert list(self.userL2.get_cases(self.organisationC
assert self.userL1.can_do("UPLOAD_DOCUMENT"
assert self.userL2.can_do("UPLOAD_DOCUMENT"
audit.models import AUDIT_TYPE_EVENT
Cases
Modify the Close Case
NO_APPEAL
action.get("outcome_spec
Blank
PublishInitiation(CaseAction
time_gate_value.get("reset
time_gate_value["unit
target.get("outcome_spec
CASE_NUMBER
milestone_types = self.evaluate_rules
isinstance(milestone_types
register_outcomes
register_outcome(HearingRequestClosesTimeGate
Submission Feedback
max_label
min_label
A Label
# Load
model_name="usercase
name="confirmed_by
DocumentAPIView.as_view
path("system/
DocumentIssueAPI.as_view
CaseDocumentAPI.as_view
Download
# Document
InvalidFile
SEARCH_CONFIDENTIAL_STATUS_MAP
JSONParser
FormParser
AUDIT_TYPE_ATTACH
SubmissionDocument.objects.filter
document__created_by__groups__name__in
Case.objects.get_case(id=case_id
submission__id=
key=_submission_document_type
bundle_id
raise Document
child_submission_document.set_user_context(request.user
result.append(result_item
Document.objects.filter
id__in
POST
bundles[0
case_id=
bundle = bundle.new_version
bundle.set_user_context(self.user
bundle.make_live(request.user
document.set_user_context(self.user
DocumentSearchAPI(TradeRemediesApiView
NON-CONF
self.case_role
publish_non_conf_interested_parties
context.django
AWS_ACCESS_KEY_ID
s3
S3 Bucket
RemoveField
Q(created_by__groups__name__in
"Documents for a submission
SubmissionDocuments
latest.refresh_from_db
sub_doc.delete
self.submission_documents
doc.created_by.is_tra
self.doc_reviewed_at
param str
FRIENDLY_DATE_FORMAT
self.case.latest_notice_of_initiation_url
NOTIFY_SUBMISSION_DEFICIENCY
str(subdoc.document.id
case_bundle =
{HOME}/trade_remedies_api
audit log download
Command
Digraph
InvalidNode
RT = rekey(RESPONSE_TYPES
node.get('response_type
dot.node(action["id
Task'
root = root if
node["outcome_spec
key_1
node.get("children
Chemical
Wood
access_log_format = os.environ.get
b)s
PublicNoticeView(APIView
/case/{CASE_ID}/
registration_of_interest
None and case_id
sector_id
case.derive_case_name
request.data.getlist("user_id
SubmissionsAPIView(TradeRemediesApiView
result_list
Tidy
submission.case.stage.key
submission.deficiency_documents
was_in_review
document_id__in
Product
request.data.get("hs_codes
ReviewTypeAPIView(TradeRemediesApiView
reference_case_id
CaseStage.objects.filter(key="DRAFT_RECEIVED").first
workflow_meta.get("draft_review_key
CaseWorkflowState.objects.set_next_action(case
request.data.getlist("nodes
node_spec.get("outcome_spec
ms_type
CaseRole.objects.all().order_by("id
case_worker_allowed_submission_types
public_submission_types
ThirdPartyInvitesAPI(TradeRemediesApiView
NoticesAPI(TradeRemediesApiView
notice.reference = reference
CaseType.objects.get(id
django-dirtyfields
pytz
UserAdmin
UserCreationForm(forms
CharField(label="Password
code="password_mismatch
UserChangeForm(forms
UserProfileInline(admin
StackedInline
is_superuser
TwoFactorAuthAdmin(admin
generated_at
JobTitleAdmin
UserTest(TestCase
fake_audit_model
Economic Advisor
name="modified_by
MilestoneType
name="notify_template
DECISIONS_REASONS_HEAR
Responses to Statement of Intended Final Determination
DECISIONS_REASONS_HEAR_ANALYSED
SubmissionType(models
Ex Officion
self.notify_template
subtype.deficient_status
no_id
no.id
related_name="merged_from_org
submission_documents_type(apps
key="caseworker
subdoc.document.created_by.is_tra
^15.0.1
bin
4.2.1
^3.1.0
uBL
https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz
^4.0.0
^3.0.0
sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
https://registry.npmjs.org/pegjs/-/pegjs-0.10.0.tgz
bin/pegjs
6.6.2
https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz
OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==
app.config_from_object("django.conf
UserContext(**context
x["pk
Updating System
key__in=["NOTICE_OF_INITIATION_DOCUMENT
HTTP_AUTHRIZATION
get_response
META
OriginValidator
CASE_REJECTED_BY_TRA
ModelSecurity
Applicant
CONTRIBUTOR_ORG_CASE_ROLE
@get_security_group.register(str
CaseAction(models
CaseRole(models
OrganisationCaseRoleManager(models
approved_by=approved_by
approved_at=approved_at
case_role.set_user_context(created_by
Organisation Administrator
#
TRA Document
Customer Document
Group.objects.create(name="Test Role
assert group.user_set.filter(id
param str reference
isinstance(audit_data
audit_log_task.delay(audit_kwargs
remove_xlsx_injection_attack_chars
test+
ON o1.name
WHERE o1.duplicate_of_id
Pick
SystemParameter.get("NOTIFY_ORGANISATION_MERGED
notify_footer(notify_contact_email
organisation = Organisation
organisation.set_user_context(user
organisation_id
user_filter["created_by
uc["case_id
datahub_id
self.companies_house_id
self.duns_number
self.case_context
contacts = self.casecontact_set.select_related
Organisation's
http://stackoverflow.com/questions/110803/dirty-fields-in-django
process_timegate_action.delay(workflow_state_id
status.ack_at
Measure Expired
#     parse(latest_expiry.value).date
name="due_date
assert number
context.tests_count
requirements.in/../requirements/base.txt
black==19.10b0
packaging==21.0
pyparsing==2.4.7
ast==1.4.3
wheel==0.37.0
TimeGateStatusManager(models
"Queryset Exporter
StopIteration
self.writer.write_row([f"NO EXPORT DATA
Note
notes.filter(case__id=case_id
note.set_user_context([request.user]
Content.objects.get(id
UserInvitations
ValidateInvitationAPIView.as_view
InviteThirdPartyAPI.as_view
S3FileField
documents.filter(query_args
Document(BaseModel
CharField(max_length=255
self.file.name.split("
self.created_by.is_tra
subdoc =
self.block_reason
documents.av_scan
Object(self.file.name
doc["case_id
DocumentBundle(SimpleBaseModel
self.submission_type
DocumentBundle.objects.exclude(id
workflow.templatetags import register
name=
"Perform AV Scan of a document stored in S3
e.g:
File Too Large'
ClientError
MultipartEncoder
S3 Object
the AV Service
BadConfigError
MalwareDetectedError
Invokes
msg =
HTTP Basic Auth
raise exc
AD_HOC_KEY
Pre-Sampling Questionnaire
the Provisional Determination"
Invite 3rd party
Additional User Request
Robert Meredith
Luisella Strona
https://avatars1.githubusercontent.com/u/36708790?v=4
Mark Higham
Paul Cooney
Krishna White"
Brendan Quinn
AA2E00
Install Python
CompaniesHouseApiSearch(TradeRemediesApiView
.json
writer_class_unimplemented
UnimplementedWriter(BaseWriter
UnimplementedWriter
MyWriter
rows(row
"Set of audit records
assert len(rows
file_format="csv
TestWriters
assert isinstance(writer.file
assert os.stat(file_name
del writer
writer.sensor.write_row.called_with(rows[0]
assert writer.sensor.write_rows.called_with(rows
x.strip
row.split
TestExporters
@pytest.mark.django_db
assert entries[0
response.data[0]['email
dateutil.relativedelta import
relativedelta
CharField(max_length=4
CaseTypeManager
self.acronym
ApiTestConfig(AppConfig
name="date
Foreign Governments
Industrial Users of Product
ContactAdmin
ContentManager
model_name='submissionstatus
name='id
name="created_at
verbose_name="password
is_staff
name="UserProfile
feature_flag_ttl
FEATURE
SC
CR
GOV_NOTIFY_API_KEY
TD0001'
get_template(template_id
return client.post_template_preview
is_whitelisted(email
in_whitelist
max_length=254
max_length=80
doc = Document.objects.get(id
max_retries=3
logger.info(result
document_ids.values_list("id
the Trade Remedies Service
DIT Investigators
TRS Orchestration
ner_output_file.txt
1.5.13
| D104
D205
W503
E704
E231
F841
Generic badge](https://badgen.net/badge
ADR
Michael Nygard's
# Architecture Decision Records
workflow](#ADR Workflow
Proposal
Tech Lead
the Trade Remedies API
API
the Django Rest Framework
DRF
AJAX
NGINX
ADR Title
Generic badge](https://badgen.net/badge/ADR
https://pypi.org/project/django-restql/
Model Serializers
REST
GraphQL
Portal
Django REST Framework
CRUD
PUT
PATCH
self.writer.write_row(["NO EXPORT
"Trade Remedies Auth
Trade Remedies Auth Application
Auth Application'
f"Third Party Invite: Deleting
black==21.11b1
E402
APIViews
ViewSets
ipython==7.31.1
Opensearch
OpenSearch
OSWrapperError
0.0.0.34
" Creates and saves a User with the given email and password
job_title_id
Determine Organisation
" Creates and saves
" Returns True
" Toggles the given role name for this user
job_title"
Test Document
Creating AWS S3 Credentials
WhiteNoiseMiddleware
DjangoTemplates
Redis - Trade
CELERY_TASK_ALWAYS_EAGER"
GOV Notify
GOV_NOTIFY_API_KEY"
HEALTH_CHECK_USER_EMAIL
PUBLIC_ENVIRONMENT_KEY"
" Set the user context of this model
r"\w+(?=\
ContactUser
type_id"
NOTIFY_FINAL_APPLICATION_RECEIVED
Set Review
case_id>/workflow/
CaseMilestone
0047_notice_published_at
https://api.notifications.service.gov.uk/services/bf/templates/8f
template_id"
Mr Chips
"Trade Remedies Auth.
Auth Application
NoteSection
Label"
"Override TWO_FACTOR_LOCK_MINUTES=2
validated_at
XXX
Customer Document"
Deficiency Document
filter_by
document_id"
bundle_id"
Files
"Authentication Views
EmailVerifyResendView
"Users.
not_blank
Test Case"
Notices
Argh
merged_from_org
" Returns True/False
Child Content 1
Child Content 2
" Setup Scenario
User A2 Org B:
Test Case X
Test Case Y"
Orgs
L2 Case
User L2 - Org C
L1
Email Verification Model
f"{key}_rule
locked_at
MY_GROUP
del node['id'
del node['node_type'
" Set a given element into the workflow
Content-Disposition"
" Set the next action state key
Tests Password
Node
name^2"
Bucket
mark delete
new_role
" Set the org to fraudulent
Test User
test1234
Caches
Patch patch_audit management command
HEALTH_CHECK_USER_TOKEN
Admin
Health Check"
f"{crypto.get_random_string(12)}{crypto.get_random_string(12).upper
notify/<uuid
Dataset
wb+
TrustedAuthTokenSerializer
f"Organisation
True Returns
" Remove HS
" Depending on the evaluated rule value
" Blanks the next action value
Test Role
4151112345"
America/Los_Angeles
" Set the
f"Removing
Home 2
case_id>/content/
API_PREFIX}/security/
Two Factor Authentication
TwoFactorAuth.two_factor_auth
User 1
NOTIFY_BLOCK_FOOTER
POST `POST /api/v1/notes
param kwargs: :return:
" Reference the association of contacts to a case
"Trade Remedies Authentication.
Doc 1
Doc 2
Notice
Interim Review
Scope Review
SE
SS
CasesConfig
" Return a Notification
" Return True
PUBLIC_ROOT_URL}/public/case/{self.reference}/submission/{sub.id}/"
" Set the stage of the case, accounting for restricted flow restrictions
LAST_RESTRICTED_FLOW_STAGE_ID
Returns
0022_add_submission_type_time_window_key
Pass
LAST_PUBLICATION
/case/{CASE_ID}/` Return
" Counts cases because it's more
Crteria
Create a "Register
GET Query
assign/{user_id}/` Assign
send_to
Custom User Model Manager
"Create User
"Create Super User.
"User Model.
V1
Trusted Token
Auth App URLs
0002_organisation_duplicate_of
a Task "
HTTP_X_ORIGIN_ENVIRONMENT
al
REGISTRATION_SOFT_LOCK
Third Party's
job_titles.json
" Retrieve the
param (
param (Organisation
settings cater
Query
parent.created_by_id
ON a.id
Applications
invite_id
B8860B
1.5.16"
my_app
MigrationTestView.as_view
Invalidate
GOV.NOTIFY
Django Request
Raises
user_does_not_exist
Authentication Serializer
Tests the PasswordSerializer
UserExistsSerializer
UserDoesNotExistSerializer
Tests the AuthenticationSerializer
AuthenticationSerializer
GB
VerifyEmailSerializer
PasswordResetRequestSerializer
288
GitHub
git config user.email
git config user.name
GOV.NOTIFY
django-db-geventpool==4.0.0
3rd Party Lawyer
3rd Party Law Incorporated
Holborn
the third party
terminated_at
